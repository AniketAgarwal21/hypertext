{"version":3,"sources":["serviceWorker.js","pages/Home/Home.js","components/ThemeToggler/ThemeToggler.js","components/Navbar/Navbar.js","App.js","index.js","components/Navbar/Navbar.module.css","components/ThemeToggler/ThemeToggler.module.css"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Home","ThemeToggler","useState","theme","setTheme","useEffect","ls","localStorage","getItem","setItem","document","body","classList","remove","querySelector","styles","switch","switchToggle","add","onClick","className","darkModeToggle","light","Navbar","logo","src","alt","hamburger","e","navLinks","links","querySelectorAll","toggle","open","forEach","link","fade","line1","line2","line3","href","App","path","component","exact","ReactDOM","render","StrictMode","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.bf2b4178.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `https://aniketagarwal21.github.io/hypertext/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message)\r\n            })\r\n    }\r\n}","import React from 'react'\r\nimport styles from \"./Home.module.css\"\r\n\r\n\r\nfunction Home() {\r\n    return (\r\n        <div>\r\n            home\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import React, { useEffect, useState } from 'react'\r\nimport styles from \"./ThemeToggler.module.css\"\r\n\r\nfunction ThemeToggler() {\r\n\r\n    const [theme, setTheme] = useState()\r\n\r\n    useEffect(() => {\r\n        const ls = window.localStorage.getItem('theme')\r\n        if (!ls) {\r\n            setTheme('light')\r\n            window.localStorage.setItem('theme', 'light')\r\n        } else { \r\n            setTheme(ls) \r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (theme === 'light') {\r\n            document.body.classList.remove('dark');\r\n            document.querySelector(`.${styles.switch}`).classList.remove(styles.switchToggle)\r\n        } else {\r\n            document.body.classList.add('dark');\r\n            document.querySelector(`.${styles.switch}`).classList.add(styles.switchToggle)\r\n        }\r\n    }, [theme])\r\n\r\n    const switchToggle = (theme) => {\r\n        if (theme === 'light') {\r\n            setTheme('dark')\r\n            window.localStorage.setItem('theme', 'dark');\r\n        } else {\r\n            setTheme('light')\r\n            window.localStorage.setItem('theme', 'light');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <button onClick={() => switchToggle(theme)} className={styles.darkModeToggle}>\r\n            <div className={`${styles.switch} ${styles.light}`}></div>\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default ThemeToggler\r\n","import React from 'react'\r\nimport styles from \"./Navbar.module.css\"\r\nimport ThemeToggler from './../ThemeToggler/ThemeToggler';\r\n\r\nfunction Navbar() {\r\n\r\n    const toggleHamburger = (e) => {\r\n        const hamburger = document.querySelector(\".hamburger\");\r\n        const navLinks = document.querySelector(\".navLinks\");\r\n        const links = document.querySelectorAll(\".navLinks li\");\r\n\r\n        navLinks.classList.toggle(styles.open);\r\n        links.forEach(link => {\r\n            link.classList.toggle(styles.fade);\r\n        });\r\n\r\n        //Hamburger Animation\r\n        hamburger.classList.toggle(styles.toggle);\r\n    }\r\n\r\n    return (\r\n        <nav>\r\n            <div className={styles.logo}>\r\n                <img src=\"/sample-logo.jpg\" alt=\"Logo\" />\r\n            </div>\r\n            <div className={`${styles.hamburger} hamburger`} onClick={toggleHamburger}>\r\n                <div className={styles.line1}></div>\r\n                <div className={styles.line2}></div>\r\n                <div className={styles.line3}></div>\r\n            </div>\r\n            <ul className={`${styles.navLinks} navLinks`}>\r\n                <li><a href=\"/\">Home</a></li>\r\n                <li><a href=\"/\">Solutions</a></li>\r\n                <li><a href=\"/\">Products</a></li>\r\n                <li><a href=\"/\">Services</a></li>\r\n                <li><a href=\"/\">Contact Us</a></li>\r\n                {/* <li><button className={styles.loginButton} href=\"#\">Login</button></li>\r\n                <li><button className={styles.joinButton} href=\"#\">Join</button></li> */}\r\n                <ThemeToggler />\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","// Modules\nimport React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\n// Pages\nimport Home from './pages/Home/Home';\n\n// Components\nimport Navbar from './components/Navbar/Navbar';\n\n// Styles\nimport './App.css';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Navbar />\n      <Switch>\n        <Route path=\"/\" component={Home} exact />\n        <Route path=\"/\" component=\"\" exact />\n        <Route path=\"/\" component=\"\" exact />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register()","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"Navbar_logo__3q0Vt\",\"navLinks\":\"Navbar_navLinks__1045q\",\"loginButton\":\"Navbar_loginButton__2fxzO\",\"joinButton\":\"Navbar_joinButton__3YxlD\",\"hamburger\":\"Navbar_hamburger__21rIQ\",\"open\":\"Navbar_open__3N5Ok\",\"fade\":\"Navbar_fade__3zcJs\",\"toggle\":\"Navbar_toggle__3uyXx\",\"line1\":\"Navbar_line1__3LO1U\",\"line2\":\"Navbar_line2__18ZDv\",\"line3\":\"Navbar_line3__2pqAO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"darkModeToggle\":\"ThemeToggler_darkModeToggle__27Gtk\",\"switch\":\"ThemeToggler_switch__2mj7y\",\"switchToggle\":\"ThemeToggler_switchToggle__3UOOh\"};"],"sourceRoot":""}